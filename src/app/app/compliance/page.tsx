'use client'

import { useState, useMemo } from 'react'
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  FileText, 
  Download, 
  Upload, 
  Calendar, 
  Clock, 
  ExternalLink, 
  RefreshCw, 
  Eye, 
  Settings, 
  Filter, 
  Search,
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart,
  Activity,
  Bell,
  Zap,
  AlertOctagon,
  Info,
  X,
  Plus,
  Edit,
  Trash2,
  Link,
  Database,
  Globe,
  Building,
  Users,
  Package,
  ShoppingCart,
  DollarSign,
  Percent
} from 'lucide-react'
import {
  useCannabisComplianceStatus,
  useCannabisComplianceViolations,
  useCannabisResolveViolation,
  useCannabisGenerateComplianceReport,
  useCannabisMetrcSyncStatus,
  useCannabisTriggerMetrcSync,
  useCannabisMetrcPackages,
  useCannabisMetrcTransfers,
  useCannabisFacilitySettings,
  useCannabisDashboardAnalytics
} from '@/hooks/use-cannabis-api'
import {
  CannabisButton,
  CannabisInput,
  CannabisSelect,
  CannabisMetricCard,
  CannabisAlert,
  CannabisLoadingSpinner,
  CannabisBadge,
  CannabisSearchInput,
  CannabisCollapsible,
  CannabisEmptyState,
  CannabisCopyToClipboard
} from '@/components/ui/cannabis-components'
import { CannabisThemeContainer, CannabisStatusIndicator } from '@/providers/theme-provider'
import { formatCurrency, formatDate, formatCannabisWeight, cn } from '@/lib/utils'

/**
 * =============================================================================
 * CultivateCo Cannabis Compliance & Reporting System
 * =============================================================================
 * Comprehensive compliance monitoring with regulatory reporting and METRC integration
 */

interface ComplianceStatus {
  overall: 'compliant' | 'warning' | 'violation' | 'critical'
  lastCheck: string
  nextCheck: string
  score: number
  categories: {
    inventory: 'compliant' | 'warning' | 'violation'
    transactions: 'compliant' | 'warning' | 'violation'
    customers: 'compliant' | 'warning' | 'violation'
    metrc: 'compliant' | 'warning' | 'violation'
    licensing: 'compliant' | 'warning' | 'violation'
    security: 'compliant' | 'warning' | 'violation'
  }
  alerts: number
  violations: number
  warnings: number
}

interface ComplianceViolation {
  id: string
  type: 'inventory' | 'transaction' | 'customer' | 'metrc' | 'licensing' | 'security'
  severity: 'low' | 'medium' | 'high' | 'critical'
  title: string
  description: string
  regulations: string[]
  status: 'open' | 'investigating' | 'resolved' | 'dismissed'
  reportedDate: string
  dueDate?: string
  resolvedDate?: string
  assignedTo?: string
  resolutionNotes?: string
  financialImpact?: number
  customerImpact?: number
  actionRequired: boolean
  autoGenerated: boolean
}

interface ComplianceReport {
  id: string
  type: 'monthly' | 'quarterly' | 'annual' | 'incident' | 'audit'
  title: string
  period: { start: string; end: string }
  status: 'draft' | 'pending' | 'submitted' | 'approved' | 'rejected'
  generatedDate: string
  submittedDate?: string
  dueDate: string
  regulatoryBody: string
  fileUrl?: string
  summary: {
    totalTransactions: number
    totalRevenue: number
    complianceScore: number
    violations: number
  }
}

interface MetrcStatus {
  connected: boolean
  lastSync: string
  nextSync: string
  syncStatus: 'idle' | 'syncing' | 'error' | 'success'
  packagesCount: number
  transfersCount: number
  errors: string[]
  facility: {
    licenseNumber: string
    name: string
    type: string
    status: 'active' | 'suspended' | 'expired'
  }
}

type ComplianceFilter = 'all' | 'violations' | 'warnings' | 'resolved' | 'overdue'
type ViolationSort = 'severity' | 'date' | 'status' | 'type'

export default function CannabisCompliancePage() {
  // Cannabis compliance state
  const [activeTab, setActiveTab] = useState<'overview' | 'violations' | 'reports' | 'metrc' | 'audit'>('overview')
  const [violationFilter, setViolationFilter] = useState<ComplianceFilter>('all')
  const [violationSort, setViolationSort] = useState<ViolationSort>('severity')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedViolation, setSelectedViolation] = useState<ComplianceViolation | null>(null)
  const [showReportModal, setShowReportModal] = useState(false)
  const [showViolationDetails, setShowViolationDetails] = useState(false)
  const [dateRange, setDateRange] = useState({
    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    end: new Date().toISOString().split('T')[0]
  })

  // Cannabis API hooks
  const { 
    data: complianceStatus, 
    isLoading: statusLoading,
    refetch: refetchStatus 
  } = useCannabisComplianceStatus()

  const { 
    data: violationsResponse, 
    isLoading: violationsLoading 
  } = useCannabisComplianceViolations({
    page: 1,
    limit: 100,
    status: violationFilter !== 'all' ? violationFilter : undefined,
    severity: violationFilter === 'violations' ? 'high' : undefined
  })

  const { 
    data: metrcStatus, 
    isLoading: metrcLoading,
    refetch: refetchMetrc 
  } = useCannabisMetrcSyncStatus()

  const { 
    data: metrcPackages 
  } = useCannabisMetrcPackages({ limit: 50 })

  const { 
    data: facilitySettings 
  } = useCannabisFacilitySettings()

  const { 
    data: analyticsData 
  } = useCannabisDashboardAnalytics('30d')

  const resolveViolationMutation = useCannabisResolveViolation()
  const generateReportMutation = useCannabisGenerateComplianceReport()
  const triggerMetrcSyncMutation = useCannabisTriggerMetrcSync()

  // Cannabis data processing
  const violations = violationsResponse?.data || []

  // Cannabis violation filtering and sorting
  const filteredViolations = useMemo(() => {
    let filtered = violations.filter((violation: ComplianceViolation) => {
      const matchesSearch = !searchQuery || 
        violation.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        violation.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        violation.type.toLowerCase().includes(searchQuery.toLowerCase())

      const matchesFilter = (() => {
        switch (violationFilter) {
          case 'violations':
            return violation.severity === 'high' || violation.severity === 'critical'
          case 'warnings':
            return violation.severity === 'low' || violation.severity === 'medium'
          case 'resolved':
            return violation.status === 'resolved'
          case 'overdue':
            return violation.dueDate && new Date(violation.dueDate) < new Date() && violation.status === 'open'
          default:
            return true
        }
      })()

      return matchesSearch && matchesFilter
    })

    // Cannabis violation sorting
    filtered.sort((a: ComplianceViolation, b: ComplianceViolation) => {
      switch (violationSort) {
        case 'severity':
          const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
          return severityOrder[b.severity] - severityOrder[a.severity]
        case 'date':
          return new Date(b.reportedDate).getTime() - new Date(a.reportedDate).getTime()
        case 'status':
          return a.status.localeCompare(b.status)
        case 'type':
          return a.type.localeCompare(b.type)
        default:
          return 0
      }
    })

    return filtered
  }, [violations, searchQuery, violationFilter, violationSort])

  // Cannabis compliance metrics
  const complianceMetrics = useMemo(() => {
    const totalViolations = violations.length
    const openViolations = violations.filter((v: ComplianceViolation) => v.status === 'open').length
    const criticalViolations = violations.filter((v: ComplianceViolation) => v.severity === 'critical').length
    const overdueViolations = violations.filter((v: ComplianceViolation) => 
      v.dueDate && new Date(v.dueDate) < new Date() && v.status === 'open'
    ).length
    const resolvedThisMonth = violations.filter((v: ComplianceViolation) => 
      v.resolvedDate && new Date(v.resolvedDate) >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
    ).length

    return {
      totalViolations,
      openViolations,
      criticalViolations,
      overdueViolations,
      resolvedThisMonth,
      complianceScore: complianceStatus?.score || 0
    }
  }, [violations, complianceStatus])

  /**
   * Handle cannabis compliance operations
   */
  const handleResolveViolation = (violationId: string, resolution: { notes: string; action: string }) => {
    resolveViolationMutation.mutate({ violationId, resolution })
  }

  const handleGenerateReport = (reportType: string) => {
    generateReportMutation.mutate({
      type: reportType,
      dateRange,
      format: 'pdf'
    })
  }

  const handleMetrcSync = () => {
    triggerMetrcSyncMutation.mutate()
  }

  if (statusLoading) {
    return <CannabisLoadingSpinner size="lg" text="Loading cannabis compliance data..." />
  }

  return (
    <div className="space-y-6">
      {/* Cannabis Compliance Header */}
      <CannabisComplianceHeader 
        complianceStatus={complianceStatus}
        onRefresh={refetchStatus}
        onGenerateReport={() => setShowReportModal(true)}
      />

      {/* Cannabis Compliance Navigation */}
      <CannabisComplianceTabs 
        activeTab={activeTab}
        onTabChange={setActiveTab}
        violationCount={complianceMetrics.openViolations}
        metrcStatus={metrcStatus}
      />

      {/* Cannabis Compliance Content */}
      {activeTab === 'overview' && (
        <CannabisComplianceOverview 
          complianceStatus={complianceStatus}
          metrics={complianceMetrics}
          violations={violations.slice(0, 5)}
          metrcStatus={metrcStatus}
          onViewAllViolations={() => setActiveTab('violations')}
          onViewMetrc={() => setActiveTab('metrc')}
        />
      )}

      {activeTab === 'violations' && (
        <CannabisViolationsPanel
          violations={filteredViolations}
          filter={violationFilter}
          onFilterChange={setViolationFilter}
          sort={violationSort}
          onSortChange={setViolationSort}
          searchQuery={searchQuery}
          onSearchChange={setSearchQuery}
          onViewViolation={(violation) => {
            setSelectedViolation(violation)
            setShowViolationDetails(true)
          }}
          onResolveViolation={handleResolveViolation}
        />
      )}

      {activeTab === 'reports' && (
        <CannabisReportsPanel
          onGenerateReport={handleGenerateReport}
          dateRange={dateRange}
          onDateRangeChange={setDateRange}
          analyticsData={analyticsData}
        />
      )}

      {activeTab === 'metrc' && (
        <CannabisMetrcPanel
          metrcStatus={metrcStatus}
          packages={metrcPackages}
          onSync={handleMetrcSync}
          onRefresh={refetchMetrc}
          facility={facilitySettings}
        />
      )}

      {activeTab === 'audit' && (
        <CannabisAuditPanel
          violations={violations}
          complianceStatus={complianceStatus}
          dateRange={dateRange}
          onDateRangeChange={setDateRange}
        />
      )}

      {/* Cannabis Generate Report Modal */}
      {showReportModal && (
        <CannabisGenerateReportModal
          onClose={() => setShowReportModal(false)}
          onGenerate={handleGenerateReport}
          dateRange={dateRange}
          onDateRangeChange={setDateRange}
          isGenerating={generateReportMutation.isPending}
        />
      )}

      {/* Cannabis Violation Details Modal */}
      {showViolationDetails && selectedViolation && (
        <CannabisViolationDetailsModal
          violation={selectedViolation}
          onClose={() => {
            setShowViolationDetails(false)
            setSelectedViolation(null)
          }}
          onResolve={handleResolveViolation}
          isResolving={resolveViolationMutation.isPending}
        />
      )}
    </div>
  )
}

/**
 * Cannabis compliance page header
 */
function CannabisComplianceHeader({
  complianceStatus,
  onRefresh,
  onGenerateReport
}: {
  complianceStatus: ComplianceStatus | undefined
  onRefresh: () => void
  onGenerateReport: () => void
}) {
  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'compliant': return 'text-cultivateco-green'
      case 'warning': return 'text-amber-600'
      case 'violation': return 'text-red-600'
      case 'critical': return 'text-red-800'
      default: return 'text-gray-600'
    }
  }

  const getStatusIcon = (status?: string) => {
    switch (status) {
      case 'compliant': return CheckCircle
      case 'warning': return AlertTriangle
      case 'violation': return AlertOctagon
      case 'critical': return AlertOctagon
      default: return Shield
    }
  }

  const StatusIcon = getStatusIcon(complianceStatus?.overall)

  return (
    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
      <div className="space-y-2">
        <h1 className="text-2xl font-bold text-cultivateco-green flex items-center space-x-2">
          <Shield className="w-6 h-6" />
          <span>Cannabis Compliance</span>
        </h1>
        
        {complianceStatus && (
          <div className="flex items-center space-x-4">
            <div className={cn('flex items-center space-x-2', getStatusColor(complianceStatus.overall))}>
              <StatusIcon className="w-5 h-5" />
              <span className="font-medium capitalize">{complianceStatus.overall}</span>
            </div>
            
            <div className="text-sm text-gray-600">
              Score: {complianceStatus.score}/100
            </div>
            
            <div className="text-sm text-gray-600">
              Last Check: {formatDate(complianceStatus.lastCheck)}
            </div>
          </div>
        )}
        
        <p className="text-gray-600">
          Monitor cannabis regulatory compliance and manage violations
        </p>
      </div>

      <div className="flex items-center space-x-3">
        <CannabisButton
          variant="outline"
          onClick={onRefresh}
          icon={RefreshCw}
        >
          Refresh
        </CannabisButton>

        <CannabisButton
          variant="outline"
          onClick={onGenerateReport}
          icon={FileText}
        >
          Generate Report
        </CannabisButton>

        <CannabisButton
          variant="primary"
          onClick={() => console.log('Compliance settings')}
          icon={Settings}
        >
          Settings
        </CannabisButton>
      </div>
    </div>
  )
}

/**
 * Cannabis compliance navigation tabs
 */
function CannabisComplianceTabs({
  activeTab,
  onTabChange,
  violationCount,
  metrcStatus
}: {
  activeTab: string
  onTabChange: (tab: 'overview' | 'violations' | 'reports' | 'metrc' | 'audit') => void
  violationCount: number
  metrcStatus: MetrcStatus | undefined
}) {
  const tabs = [
    { id: 'overview', label: 'Overview', icon: BarChart3 },
    { 
      id: 'violations', 
      label: 'Violations', 
      icon: AlertTriangle,
      badge: violationCount > 0 ? violationCount : undefined,
      badgeColor: violationCount > 0 ? 'red' : undefined
    },
    { id: 'reports', label: 'Reports', icon: FileText },
    { 
      id: 'metrc', 
      label: 'METRC', 
      icon: Database,
      status: metrcStatus?.connected ? 'connected' : 'disconnected'
    },
    { id: 'audit', label: 'Audit Trail', icon: Activity }
  ]

  return (
    <CannabisThemeContainer variant="card">
      <div className="flex space-x-1 overflow-x-auto">
        {tabs.map(tab => {
          const Icon = tab.icon
          return (
            <button
              key={tab.id}
              onClick={() => onTabChange(tab.id as any)}
              className={cn(
                'flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors whitespace-nowrap',
                activeTab === tab.id
                  ? 'bg-cultivateco-green text-cultivateco-cream'
                  : 'text-gray-700 hover:bg-gray-100'
              )}
            >
              <Icon className="w-4 h-4" />
              <span>{tab.label}</span>
              
              {tab.badge && (
                <CannabisBadge 
                  variant={tab.badgeColor === 'red' ? 'violation' : 'info'} 
                  size="sm"
                >
                  {tab.badge}
                </CannabisBadge>
              )}
              
              {tab.status && (
                <CannabisStatusIndicator
                  status={tab.status}
                  size="sm"
                />
              )}
            </button>
          )
        })}
      </div>
    </CannabisThemeContainer>
  )
}

/**
 * Cannabis compliance overview
 */
function CannabisComplianceOverview({
  complianceStatus,
  metrics,
  violations,
  metrcStatus,
  onViewAllViolations,
  onViewMetrc
}: {
  complianceStatus: ComplianceStatus | undefined
  metrics: any
  violations: ComplianceViolation[]
  metrcStatus: MetrcStatus | undefined
  onViewAllViolations: () => void
  onViewMetrc: () => void
}) {
  return (
    <div className="space-y-6">
      {/* Cannabis Compliance Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
        <CannabisMetricCard
          title="Compliance Score"
          value={`${metrics.complianceScore}/100`}
          icon={Shield}
          color={metrics.complianceScore >= 90 ? 'green' : metrics.complianceScore >= 70 ? 'amber' : 'red'}
        />

        <CannabisMetricCard
          title="Open Violations"
          value={metrics.openViolations}
          icon={AlertTriangle}
          color={metrics.openViolations === 0 ? 'green' : 'red'}
        />

        <CannabisMetricCard
          title="Critical Issues"
          value={metrics.criticalViolations}
          icon={AlertOctagon}
          color={metrics.criticalViolations === 0 ? 'green' : 'red'}
        />

        <CannabisMetricCard
          title="Overdue Items"
          value={metrics.overdueViolations}
          icon={Clock}
          color={metrics.overdueViolations === 0 ? 'green' : 'red'}
        />

        <CannabisMetricCard
          title="Resolved This Month"
          value={metrics.resolvedThisMonth}
          icon={CheckCircle}
          color="green"
        />

        <CannabisMetricCard
          title="METRC Status"
          value={metrcStatus?.connected ? 'Connected' : 'Disconnected'}
          icon={Database}
          color={metrcStatus?.connected ? 'green' : 'red'}
          onClick={onViewMetrc}
        />
      </div>

      {/* Cannabis Category Status */}
      {complianceStatus && (
        <CannabisThemeContainer variant="card">
          <div className="space-y-4">
            <h3 className="font-semibold text-cultivateco-green">Cannabis Compliance Categories</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {Object.entries(complianceStatus.categories).map(([category, status]) => (
                <div key={category} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium capitalize">{category.replace('_', ' ')}</span>
                  <CannabisBadge 
                    variant={status === 'compliant' ? 'compliant' : status === 'warning' ? 'warning' : 'violation'}
                    size="sm"
                  >
                    {status}
                  </CannabisBadge>
                </div>
              ))}
            </div>
          </div>
        </CannabisThemeContainer>
      )}

      {/* Recent Violations */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-cultivateco-green">Recent Cannabis Violations</h3>
            <CannabisButton
              variant="outline"
              size="sm"
              onClick={onViewAllViolations}
            >
              View All
            </CannabisButton>
          </div>
          
          {violations.length === 0 ? (
            <CannabisEmptyState
              icon={CheckCircle}
              title="No Recent Violations"
              description="Your cannabis operation is currently compliant"
            />
          ) : (
            <div className="space-y-3">
              {violations.map(violation => (
                <CannabisViolationCard
                  key={violation.id}
                  violation={violation}
                  compact={true}
                />
              ))}
            </div>
          )}
        </div>
      </CannabisThemeContainer>
    </div>
  )
}

/**
 * Cannabis violations panel
 */
function CannabisViolationsPanel({
  violations,
  filter,
  onFilterChange,
  sort,
  onSortChange,
  searchQuery,
  onSearchChange,
  onViewViolation,
  onResolveViolation
}: {
  violations: ComplianceViolation[]
  filter: ComplianceFilter
  onFilterChange: (filter: ComplianceFilter) => void
  sort: ViolationSort
  onSortChange: (sort: ViolationSort) => void
  searchQuery: string
  onSearchChange: (query: string) => void
  onViewViolation: (violation: ComplianceViolation) => void
  onResolveViolation: (violationId: string, resolution: { notes: string; action: string }) => void
}) {
  return (
    <div className="space-y-6">
      {/* Cannabis Violations Filters */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <div className="flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
            <div className="flex-1">
              <CannabisSearchInput
                value={searchQuery}
                onChange={(e) => onSearchChange(e.target.value)}
                placeholder="Search cannabis violations..."
              />
            </div>
            
            <div className="flex space-x-2">
              <CannabisSelect
                value={filter}
                onChange={(e) => onFilterChange(e.target.value as ComplianceFilter)}
                options={[
                  { value: 'all', label: 'All Violations' },
                  { value: 'violations', label: 'High/Critical' },
                  { value: 'warnings', label: 'Warnings' },
                  { value: 'resolved', label: 'Resolved' },
                  { value: 'overdue', label: 'Overdue' }
                ]}
              />
              
              <CannabisSelect
                value={sort}
                onChange={(e) => onSortChange(e.target.value as ViolationSort)}
                options={[
                  { value: 'severity', label: 'Severity' },
                  { value: 'date', label: 'Date' },
                  { value: 'status', label: 'Status' },
                  { value: 'type', label: 'Type' }
                ]}
              />
            </div>
          </div>
        </div>
      </CannabisThemeContainer>

      {/* Cannabis Violations List */}
      <CannabisThemeContainer variant="card">
        {violations.length === 0 ? (
          <CannabisEmptyState
            icon={CheckCircle}
            title="No Cannabis Violations Found"
            description="No violations match your current filters"
          />
        ) : (
          <div className="space-y-3">
            {violations.map(violation => (
              <CannabisViolationCard
                key={violation.id}
                violation={violation}
                onView={() => onViewViolation(violation)}
                onResolve={onResolveViolation}
              />
            ))}
          </div>
        )}
      </CannabisThemeContainer>
    </div>
  )
}

/**
 * Cannabis violation card
 */
function CannabisViolationCard({
  violation,
  compact = false,
  onView,
  onResolve
}: {
  violation: ComplianceViolation
  compact?: boolean
  onView?: () => void
  onResolve?: (violationId: string, resolution: { notes: string; action: string }) => void
}) {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'violation'
      case 'high': return 'violation'
      case 'medium': return 'warning'
      case 'low': return 'info'
      default: return 'info'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'resolved': return 'compliant'
      case 'investigating': return 'warning'
      case 'dismissed': return 'info'
      default: return 'violation'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'inventory': return Package
      case 'transaction': return ShoppingCart
      case 'customer': return Users
      case 'metrc': return Database
      case 'licensing': return FileText
      case 'security': return Shield
      default: return AlertTriangle
    }
  }

  const TypeIcon = getTypeIcon(violation.type)
  const isOverdue = violation.dueDate && new Date(violation.dueDate) < new Date() && violation.status === 'open'

  return (
    <div className={cn(
      'border border-gray-200 rounded-lg p-4 space-y-3',
      compact ? 'hover:bg-gray-50' : '',
      isOverdue ? 'border-red-300 bg-red-50' : ''
    )}>
      <div className="flex items-start justify-between">
        <div className="flex items-start space-x-3">
          <div className={cn(
            'p-2 rounded-lg',
            violation.severity === 'critical' ? 'bg-red-100 text-red-600' :
            violation.severity === 'high' ? 'bg-red-100 text-red-600' :
            violation.severity === 'medium' ? 'bg-amber-100 text-amber-600' :
            'bg-blue-100 text-blue-600'
          )}>
            <TypeIcon className="w-4 h-4" />
          </div>
          
          <div className="flex-1 space-y-1">
            <div className="flex items-center space-x-2">
              <h4 className="font-medium text-gray-900">{violation.title}</h4>
              <CannabisBadge variant={getSeverityColor(violation.severity)} size="sm">
                {violation.severity.toUpperCase()}
              </CannabisBadge>
              <CannabisBadge variant={getStatusColor(violation.status)} size="sm">
                {violation.status}
              </CannabisBadge>
            </div>
            
            {!compact && (
              <p className="text-sm text-gray-600">{violation.description}</p>
            )}
            
            <div className="flex items-center space-x-4 text-xs text-gray-500">
              <span>Type: {violation.type}</span>
              <span>Reported: {formatDate(violation.reportedDate)}</span>
              {violation.dueDate && (
                <span className={isOverdue ? 'text-red-600 font-medium' : ''}>
                  Due: {formatDate(violation.dueDate)}
                </span>
              )}
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {onView && (
            <button
              onClick={onView}
              className="text-cultivateco-blue hover:text-cultivateco-green"
              title="View violation details"
            >
              <Eye className="w-4 h-4" />
            </button>
          )}
          
          {onResolve && violation.status === 'open' && (
            <CannabisButton
              size="sm"
              variant="outline"
              onClick={() => console.log('Open resolve modal')}
            >
              Resolve
            </CannabisButton>
          )}
        </div>
      </div>
      
      {isOverdue && (
        <CannabisAlert
          type="error"
          title="Overdue Violation"
          message="This violation is past its due date and requires immediate attention"
        />
      )}
    </div>
  )
}

/**
 * Cannabis reports panel
 */
function CannabisReportsPanel({
  onGenerateReport,
  dateRange,
  onDateRangeChange,
  analyticsData
}: {
  onGenerateReport: (type: string) => void
  dateRange: { start: string; end: string }
  onDateRangeChange: (range: { start: string; end: string }) => void
  analyticsData: any
}) {
  const reportTypes = [
    {
      id: 'monthly',
      title: 'Monthly Compliance Report',
      description: 'Comprehensive monthly cannabis compliance summary',
      frequency: 'Monthly',
      nextDue: 'Dec 1, 2024'
    },
    {
      id: 'quarterly',
      title: 'Quarterly State Report',
      description: 'Quarterly cannabis business report for state regulators',
      frequency: 'Quarterly',
      nextDue: 'Jan 15, 2025'
    },
    {
      id: 'annual',
      title: 'Annual License Renewal',
      description: 'Annual cannabis license renewal documentation',
      frequency: 'Annual',
      nextDue: 'Mar 31, 2025'
    },
    {
      id: 'incident',
      title: 'Incident Report',
      description: 'Cannabis compliance incident documentation',
      frequency: 'As Needed',
      nextDue: 'N/A'
    }
  ]

  return (
    <div className="space-y-6">
      {/* Cannabis Report Generation */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <h3 className="font-semibold text-cultivateco-green">Generate Cannabis Reports</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <CannabisInput
              label="Start Date"
              type="date"
              value={dateRange.start}
              onChange={(e) => onDateRangeChange({ ...dateRange, start: e.target.value })}
            />
            
            <CannabisInput
              label="End Date"
              type="date"
              value={dateRange.end}
              onChange={(e) => onDateRangeChange({ ...dateRange, end: e.target.value })}
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {reportTypes.map(report => (
              <div key={report.id} className="border border-gray-200 rounded-lg p-4 space-y-3">
                <div>
                  <h4 className="font-medium">{report.title}</h4>
                  <p className="text-sm text-gray-600">{report.description}</p>
                </div>
                
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-500">Next Due: {report.nextDue}</span>
                  <CannabisButton
                    size="sm"
                    variant="outline"
                    onClick={() => onGenerateReport(report.id)}
                    icon={Download}
                  >
                    Generate
                  </CannabisButton>
                </div>
              </div>
            ))}
          </div>
        </div>
      </CannabisThemeContainer>

      {/* Cannabis Analytics Summary */}
      {analyticsData && (
        <CannabisThemeContainer variant="card">
          <div className="space-y-4">
            <h3 className="font-semibold text-cultivateco-green">Cannabis Business Analytics</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-cultivateco-green">
                  {analyticsData.totalTransactions?.toLocaleString() || 0}
                </div>
                <div className="text-sm text-gray-600">Total Transactions</div>
              </div>
              
              <div className="text-center">
                <div className="text-2xl font-bold text-cultivateco-green">
                  {formatCurrency(analyticsData.totalRevenue || 0)}
                </div>
                <div className="text-sm text-gray-600">Total Revenue</div>
              </div>
              
              <div className="text-center">
                <div className="text-2xl font-bold text-cultivateco-green">
                  {analyticsData.customerCount?.toLocaleString() || 0}
                </div>
                <div className="text-sm text-gray-600">Active Customers</div>
              </div>
              
              <div className="text-center">
                <div className="text-2xl font-bold text-cultivateco-green">
                  {analyticsData.inventoryValue ? formatCurrency(analyticsData.inventoryValue) : '$0'}
                </div>
                <div className="text-sm text-gray-600">Inventory Value</div>
              </div>
            </div>
          </div>
        </CannabisThemeContainer>
      )}
    </div>
  )
}

/**
 * Cannabis METRC panel
 */
function CannabisMetrcPanel({
  metrcStatus,
  packages,
  onSync,
  onRefresh,
  facility
}: {
  metrcStatus: MetrcStatus | undefined
  packages: any
  onSync: () => void
  onRefresh: () => void
  facility: any
}) {
  return (
    <div className="space-y-6">
      {/* Cannabis METRC Status */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-cultivateco-green">METRC Integration Status</h3>
            <div className="flex items-center space-x-2">
              <CannabisStatusIndicator
                status={metrcStatus?.connected ? 'connected' : 'disconnected'}
                size="sm"
              />
              <span className="text-sm">
                {metrcStatus?.connected ? 'Connected' : 'Disconnected'}
              </span>
            </div>
          </div>
          
          {metrcStatus && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-1">
                <div className="text-sm text-gray-600">Last Sync</div>
                <div className="font-medium">{formatDate(metrcStatus.lastSync)}</div>
              </div>
              
              <div className="space-y-1">
                <div className="text-sm text-gray-600">Packages</div>
                <div className="font-medium">{metrcStatus.packagesCount?.toLocaleString()}</div>
              </div>
              
              <div className="space-y-1">
                <div className="text-sm text-gray-600">Transfers</div>
                <div className="font-medium">{metrcStatus.transfersCount?.toLocaleString()}</div>
              </div>
            </div>
          )}
          
          <div className="flex space-x-3">
            <CannabisButton
              variant="outline"
              onClick={onRefresh}
              icon={RefreshCw}
            >
              Refresh
            </CannabisButton>
            
            <CannabisButton
              variant="primary"
              onClick={onSync}
              icon={Database}
            >
              Sync Now
            </CannabisButton>
          </div>
        </div>
      </CannabisThemeContainer>

      {/* Cannabis Facility Info */}
      {facility && (
        <CannabisThemeContainer variant="card">
          <div className="space-y-4">
            <h3 className="font-semibold text-cultivateco-green">Cannabis Facility Information</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <div>
                  <div className="text-sm text-gray-600">Facility Name</div>
                  <div className="font-medium">{facility.name}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-600">License Number</div>
                  <CannabisCopyToClipboard text={facility.licenseNumber} />
                </div>
              </div>
              
              <div className="space-y-3">
                <div>
                  <div className="text-sm text-gray-600">License Type</div>
                  <div className="font-medium">{facility.licenseType}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-600">Status</div>
                  <CannabisBadge 
                    variant={facility.status === 'active' ? 'compliant' : 'violation'}
                    size="sm"
                  >
                    {facility.status}
                  </CannabisBadge>
                </div>
              </div>
            </div>
          </div>
        </CannabisThemeContainer>
      )}

      {/* Cannabis Recent Packages */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <h3 className="font-semibold text-cultivateco-green">Recent METRC Packages</h3>
          
          {packages?.data?.length > 0 ? (
            <div className="space-y-3">
              {packages.data.slice(0, 10).map((pkg: any) => (
                <div key={pkg.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="space-y-1">
                    <div className="font-medium">{pkg.label}</div>
                    <div className="text-sm text-gray-600">
                      {pkg.productName} • {formatCannabisWeight(pkg.quantity, pkg.unit)}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <CannabisBadge 
                      variant={pkg.status === 'active' ? 'compliant' : 'info'}
                      size="sm"
                    >
                      {pkg.status}
                    </CannabisBadge>
                    
                    <button className="text-cultivateco-blue hover:text-cultivateco-green">
                      <ExternalLink className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <CannabisEmptyState
              icon={Database}
              title="No METRC Packages"
              description="No packages found in METRC system"
            />
          )}
        </div>
      </CannabisThemeContainer>
    </div>
  )
}

/**
 * Cannabis audit panel
 */
function CannabisAuditPanel({
  violations,
  complianceStatus,
  dateRange,
  onDateRangeChange
}: {
  violations: ComplianceViolation[]
  complianceStatus: ComplianceStatus | undefined
  dateRange: { start: string; end: string }
  onDateRangeChange: (range: { start: string; end: string }) => void
}) {
  const auditEvents = useMemo(() => {
    return violations.map(violation => ({
      id: violation.id,
      timestamp: violation.reportedDate,
      type: 'violation',
      category: violation.type,
      severity: violation.severity,
      description: violation.title,
      user: violation.assignedTo || 'System',
      status: violation.status
    })).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
  }, [violations])

  return (
    <div className="space-y-6">
      {/* Cannabis Audit Filters */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <h3 className="font-semibold text-cultivateco-green">Cannabis Audit Trail</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <CannabisInput
              label="Start Date"
              type="date"
              value={dateRange.start}
              onChange={(e) => onDateRangeChange({ ...dateRange, start: e.target.value })}
            />
            
            <CannabisInput
              label="End Date"
              type="date"
              value={dateRange.end}
              onChange={(e) => onDateRangeChange({ ...dateRange, end: e.target.value })}
            />
          </div>
        </div>
      </CannabisThemeContainer>

      {/* Cannabis Audit Events */}
      <CannabisThemeContainer variant="card">
        <div className="space-y-4">
          <h4 className="font-medium">Recent Cannabis Compliance Events</h4>
          
          {auditEvents.length === 0 ? (
            <CannabisEmptyState
              icon={Activity}
              title="No Audit Events"
              description="No compliance events found for the selected date range"
            />
          ) : (
            <div className="space-y-3">
              {auditEvents.slice(0, 20).map(event => (
                <div key={event.id} className="flex items-start space-x-3 p-3 border border-gray-200 rounded-lg">
                  <div className={cn(
                    'p-1 rounded-full',
                    event.severity === 'critical' ? 'bg-red-100' :
                    event.severity === 'high' ? 'bg-red-100' :
                    event.severity === 'medium' ? 'bg-amber-100' :
                    'bg-blue-100'
                  )}>
                    <Activity className="w-3 h-3" />
                  </div>
                  
                  <div className="flex-1 space-y-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">{event.description}</span>
                      <CannabisBadge 
                        variant={event.severity === 'critical' || event.severity === 'high' ? 'violation' : 'warning'}
                        size="sm"
                      >
                        {event.severity}
                      </CannabisBadge>
                    </div>
                    
                    <div className="text-sm text-gray-600">
                      {event.category} • {formatDate(event.timestamp)} • {event.user}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </CannabisThemeContainer>
    </div>
  )
}

/**
 * Cannabis generate report modal - simplified
 */
function CannabisGenerateReportModal({
  onClose,
  onGenerate,
  dateRange,
  onDateRangeChange,
  isGenerating
}: {
  onClose: () => void
  onGenerate: (type: string) => void
  dateRange: { start: string; end: string }
  onDateRangeChange: (range: { start: string; end: string }) => void
  isGenerating: boolean
}) {
  const [reportType, setReportType] = useState('monthly')

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-cultivateco-green">Generate Cannabis Report</h2>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-4">
          <CannabisSelect
            label="Report Type"
            value={reportType}
            onChange={(e) => setReportType(e.target.value)}
            options={[
              { value: 'monthly', label: 'Monthly Compliance Report' },
              { value: 'quarterly', label: 'Quarterly State Report' },
              { value: 'annual', label: 'Annual License Report' },
              { value: 'incident', label: 'Incident Report' }
            ]}
          />

          <div className="grid grid-cols-2 gap-4">
            <CannabisInput
              label="Start Date"
              type="date"
              value={dateRange.start}
              onChange={(e) => onDateRangeChange({ ...dateRange, start: e.target.value })}
            />
            
            <CannabisInput
              label="End Date"
              type="date"
              value={dateRange.end}
              onChange={(e) => onDateRangeChange({ ...dateRange, end: e.target.value })}
            />
          </div>

          <div className="flex space-x-4">
            <CannabisButton
              onClick={onClose}
              variant="outline"
              className="flex-1"
            >
              Cancel
            </CannabisButton>
            
            <CannabisButton
              onClick={() => onGenerate(reportType)}
              variant="primary"
              className="flex-1"
              loading={isGenerating}
              icon={FileText}
            >
              Generate Report
            </CannabisButton>
          </div>
        </div>
      </div>
    </div>
  )
}

/**
 * Cannabis violation details modal - simplified
 */
function CannabisViolationDetailsModal({
  violation,
  onClose,
  onResolve,
  isResolving
}: {
  violation: ComplianceViolation
  onClose: () => void
  onResolve: (violationId: string, resolution: { notes: string; action: string }) => void
  isResolving: boolean
}) {
  const [resolution, setResolution] = useState({ notes: '', action: 'corrected' })

  const handleResolve = () => {
    onResolve(violation.id, resolution)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-cultivateco-green">Cannabis Violation Details</h2>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          <div className="space-y-4">
            <div>
              <h3 className="font-medium text-gray-900">{violation.title}</h3>
              <p className="text-gray-600 mt-1">{violation.description}</p>
            </div>
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Type:</span>
                <span className="ml-2 font-medium">{violation.type}</span>
              </div>
              <div>
                <span className="text-gray-600">Severity:</span>
                <span className="ml-2">
                  <CannabisBadge variant={violation.severity === 'critical' ? 'violation' : 'warning'} size="sm">
                    {violation.severity}
                  </CannabisBadge>
                </span>
              </div>
              <div>
                <span className="text-gray-600">Reported:</span>
                <span className="ml-2 font-medium">{formatDate(violation.reportedDate)}</span>
              </div>
              <div>
                <span className="text-gray-600">Due Date:</span>
                <span className="ml-2 font-medium">{violation.dueDate ? formatDate(violation.dueDate) : 'N/A'}</span>
              </div>
            </div>
          </div>

          {violation.status === 'open' && (
            <div className="space-y-4 border-t pt-4">
              <h4 className="font-medium">Resolve Violation</h4>
              
              <CannabisSelect
                label="Resolution Action"
                value={resolution.action}
                onChange={(e) => setResolution({ ...resolution, action: e.target.value })}
                options={[
                  { value: 'corrected', label: 'Issue Corrected' },
                  { value: 'policy_updated', label: 'Policy Updated' },
                  { value: 'training_completed', label: 'Training Completed' },
                  { value: 'system_fixed', label: 'System Fixed' },
                  { value: 'other', label: 'Other' }
                ]}
              />
              
              <CannabisInput
                label="Resolution Notes"
                value={resolution.notes}
                onChange={(e) => setResolution({ ...resolution, notes: e.target.value })}
                placeholder="Describe how this violation was resolved..."
              />
              
              <CannabisButton
                onClick={handleResolve}
                variant="primary"
                loading={isResolving}
                icon={CheckCircle}
                disabled={!resolution.notes.trim()}
              >
                Resolve Violation
              </CannabisButton>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
